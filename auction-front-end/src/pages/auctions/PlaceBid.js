import React, {useState, useEffect} from "react";
import axios from "axios";
import {useNavigate} from "react-router-dom";
import {toast, ToastContainer} from "react-toastify";
import apiConfig from "../../config/apiConfig";
import Confetti from "react-confetti";
import {FaPaypal} from "react-icons/fa";
import {AiOutlineCreditCard} from "react-icons/ai"; // Import th∆∞ vi·ªán confetti


const PlaceBid = ({
                      auctionId,
                      currentPrice,
                      bidStep,
                      depositAmount,
                      token: propToken,
                      customerId: propCustomerId,
                      ownerId
                  }) => {
    const navigate = useNavigate();
    const [bidAmount, setBidAmount] = useState("");
    const [showPaymentOptions, setShowPaymentOptions] = useState(false);
    const [error, setError] = useState("");
    const [token, setToken] = useState(propToken || localStorage.getItem("token"));
    const [customerId, setCustomerId] = useState(propCustomerId || localStorage.getItem("customerId"));
    const [showConfetti, setShowConfetti] = useState(false); // State ƒë·ªÉ hi·ªÉn th·ªã confetti


    const minBid = currentPrice + bidStep;
    const isOwner = customerId === ownerId;

    useEffect(() => {
        console.log("[DEBUG] Token t·ª´ props:", propToken);
        console.log("[DEBUG] Token t·ª´ Local Storage:", localStorage.getItem("token"));
        console.log("[DEBUG] Token state:", token);

        if (!token) {
            const storedToken = localStorage.getItem("token");
            if (storedToken) setToken(storedToken);
        }
    }, [token, propToken]);

    useEffect(() => {
        console.log("[DEBUG] customerId t·ª´ props:", propCustomerId);
        console.log("[DEBUG] customerId t·ª´ Local Storage:", localStorage.getItem("customerId"));
        console.log("[DEBUG] customerId state tr∆∞·ªõc update:", customerId);

        if (!customerId) {
            const storedCustomerId = localStorage.getItem("customerId");
            if (storedCustomerId) setCustomerId(storedCustomerId);
        }
        console.log("[DEBUG] customerId state sau update:", customerId);
    }, [customerId, propCustomerId]);

    // H√†m ki·ªÉm tra ƒë·∫∑t c·ªçc
    const checkDeposit = async () => {
        try {
            const response = await axios.get(`${apiConfig.bids}/deposit/check/${auctionId}`, {
                headers: {Authorization: `Bearer ${token}`}
            });
            return response.data;
        } catch (err) {
            console.error("‚ùå [ERROR] Ki·ªÉm tra ƒë·∫∑t c·ªçc:", err);
            return false;
        }
    };

    const handleBidSubmit = async (e) => {
        e.preventDefault();

        if (isOwner) {
            setError("B·∫°n kh√¥ng th·ªÉ tham gia ƒë·∫•u gi√° s·∫£n ph·∫©m c·ªßa ch√≠nh m√¨nh.");
            return;
        }

        const numericBid = parseFloat(bidAmount);

        if (!token) {
            setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫•u gi√°.");
            return;
        }

        if (!customerId) {
            console.error("‚ö†Ô∏è [ERROR] customerId b·ªã undefined!");
            setError("L·ªói h·ªá th·ªëng: Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
            return;
        }

        if (isNaN(numericBid) || numericBid < minBid) {
            setError(`Gi√° ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng ${minBid.toLocaleString()} VNƒê.`);
            return;
        }

        // Ki·ªÉm tra ƒë·∫∑t c·ªçc
        const hasDeposit = await checkDeposit();
        if (!hasDeposit) {
            setError("B·∫°n c·∫ßn thanh to√°n ƒë·∫∑t c·ªçc ƒë·ªÉ ƒë·∫•u gi√°!");
            setShowPaymentOptions(true);
            return;
        }

        try {
            await axios.post(
                `${apiConfig.bids}/auction/${auctionId}`,
                {bidAmount: numericBid},
                {headers: {Authorization: `Bearer ${token}`}}
            );

            // Hi·ªÉn th·ªã hi·ªáu ·ª©ng confetti khi ƒë·∫∑t gi√° th√†nh c√¥ng
            setShowConfetti(true);
            toast.success("üéâ ƒê·∫∑t gi√° th√†nh c√¥ng!");

            // Sau 3 gi√¢y, t·∫Øt confetti v√† chuy·ªÉn h∆∞·ªõng
            setTimeout(() => {
                setShowConfetti(false);
                navigate("/auctions");
            }, 6000);

            setBidAmount("");
            setError("");
        } catch (err) {
            console.error("‚ùå [ERROR] Bid th·∫•t b·∫°i:", err.response?.data || err.message);
            setError(err.response?.data?.message || "G·ª≠i gi√° ƒë·∫•u th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };

    const handlePayment = async (method) => {
        if (!auctionId) {
            console.error("‚ùå [ERROR] auctionId b·ªã undefined!");
            setError("L·ªói: Kh√¥ng t√¨m th·∫•y auctionId.");
            return;
        }
        const finalDepositAmount = Math.max(depositAmount, 10000);

        try {
            console.log("üîÑ [DEBUG] G·ª≠i thanh to√°n:", {customerId, auctionId, depositAmount, method});

            console.log("üîÑ [DEBUG] G·ª≠i thanh to√°n:", { customerId, auctionId, depositAmount, method });
            const response = await axios.post(
                `${apiConfig.transactions}/create`,
                {
                    customerId,
                    auctionId,
                    amount: finalDepositAmount, // ‚úÖ D√πng t·ª´ props
                    paymentMethod: method,
                    returnUrl: window.location.href
                },
                {headers: {Authorization: `Bearer ${token}`}}
            );
            const {redirectUrl} = response.data;
            if (redirectUrl) {
                window.location.href = redirectUrl;
            } else {
                alert("Kh√¥ng th·ªÉ t·∫°o giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i!");
            }
        } catch (err) {
            console.error("‚ùå [ERROR] Thanh to√°n th·∫•t b·∫°i:", err.response?.data || err.message);
            setError("Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };

    return (
        <>
            {/* Hi·ªÉn th·ªã confetti khi ƒë·∫∑t gi√° th√†nh c√¥ng */}
            {showConfetti && (
                <Confetti width={window.innerWidth} height={window.innerHeight} recycle={false} numberOfPieces={200} />
            )}
            <form onSubmit={handleBidSubmit} style={{marginTop: "1rem"}}>
                <div style={{display: "flex", alignItems: "center"}}>
                    <input
                        type="number"
                        placeholder={`Nh·∫≠p t·ª´ ${minBid.toLocaleString()} VNƒê`}
                        value={bidAmount}
                        onChange={(e) => setBidAmount(e.target.value)}
                        min={minBid}
                        style={{padding: "0.5rem", marginRight: "0.5rem"}}
                        disabled={isOwner}
                    />
                    <button
                        type="submit"
                        style={{
                            padding: "0.5rem 1rem",
                            backgroundColor: "#f0c674",
                            color: "black",
                            border: "none",
                            borderRadius: "5px",
                            display: "flex",
                            alignItems: "center",
                            gap: "8px",
                            cursor: isOwner ? "not-allowed" : "pointer",
                            opacity: isOwner ? 0.6 : 1,
                            whiteSpace: "nowrap"
                        }}
                        disabled={isOwner}
                    > ƒê·∫∑t gi√°
                    </button>
                </div>
                    {error && <p style={{color: "red", marginTop: "0.5rem"}}>{error}</p>}
                    {isOwner && (
                        <p style={{color: "orange", marginTop: "0.5rem"}}>
                            B·∫°n kh√¥ng th·ªÉ ƒë·∫•u gi√° s·∫£n ph·∫©m do ch√≠nh m√¨nh ƒëƒÉng.
                        </p>
                    )}
            </form>

            {showPaymentOptions && (
                <div style={{marginTop: "1rem"}}>
                    <h3>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:</h3>
                    <p>
                        <strong>S·ªë ti·ªÅn ƒë·∫∑t
                            c·ªçc:</strong> {Math.max(depositAmount, 10000).toLocaleString('vi-VN')} VNƒê
                    </p>
                    <p style={{fontSize: "0.9rem", color: "gray", marginTop: "-0.5rem"}}>
                        (L∆∞u √Ω: S·ªë ti·ªÅn ƒë·∫∑t c·ªçc t·ªëi thi·ªÉu l√† 10,000 VNƒê)
                    </p>
                    <div className="payment-buttons">
                        <button
                            className="btn-paypal"
                            onClick={() => handlePayment("PAYPAL")}
                        ><FaPaypal size={24} style={{marginRight: 8}}/>
                            PayPal
                        </button>
                        <button
                            className="btn-vnpay"
                            onClick={() => handlePayment("VNPAY")}
                        >
                            <AiOutlineCreditCard size={24}
                                                 style={{marginRight: 8}}/>
                            VNPAY
                        </button>
                    </div>
                </div>
            )}

            <ToastContainer position="top-right" autoClose={2000} />
        </>
    );
};

export default PlaceBid;
